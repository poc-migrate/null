keep:
  enabled: false
  namespace: keephq
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::603603647605:role/keephq
    name: ""
  nameOverride: ""
  fullnameOverride: "keephq"
  isGKE: false

  global:
    # this section controls the ingress resource at nginx-ingress.yaml
    ingress:
      enabled: false

  # Additional labels that should be applied to all resources
  additionalLabels:
    {}
    # app: keep

  backend:
    # if true, the backend will be enabled
    enabled: true
    # if true, wait for the database to be ready before starting the API
    # if you use external database, you can set this to false
    waitForDatabase:
      enabled: true
      port: 5432
    # if true, the database connection string will be read from a secret
    # if it is false, the DATABASE_CONNECTION_STRING value can be set directly
    databaseConnectionStringFromSecret:
      enabled: true
      secretName: "keephq-secret"
      secretKey: "DATABASE_CONNECTION_STRING"
    env:
      # - name: DATABASE_CONNECTION_STRING
      #   value: postgresql+psycopg2://xxx:yyyy@keephq:5432/keep
      # value: mysql+pymysql://root@keep-database:3306/keep
      - name: DATABASE_NAME
        value: bdo-keephq-lz-common-services-db-postgresql-rds.cwt6nodrbta6.ap-southeast-1.rds.amazonaws.com
      - name: SECRET_MANAGER_TYPE
        value: k8s
      - name: PORT
        value: "8080"
      - name: PUSHER_APP_ID
        value: 1
      - name: PUSHER_APP_KEY
        value: keepappkey
      - name: PUSHER_APP_SECRET
        value: keepappsecret
      - name: PUSHER_HOST
        value: keep-websocket
      - name: PUSHER_PORT
        value: 6001
      - name: PROMETHEUS_MULTIPROC_DIR
        value: "/tmp/prometheus"
    # -- Name of the secret to include
    envFromSecret: "keephq-secret"

    # -- Sensible environment variables will be rendered as a new secret object; escape {{ in secret values to avoid Helm interpretation.
    envRenderSecret: {}

    # -- List of secrets to include. Must include name and can be marked as optional.
    envFromSecrets: []
    # - name: keep-secret-name
    #   prefix: prefix
    #   optional: true

    # -- configmaps to include. Must include name and can be marked as optional.
    # each entry should contain a name key, and can optionally specify whether the configmap must be defined with an optional key.
    envFromConfigMaps: []
    # - name: keep-env-configmap-name
    #   prefix: prefix
    #   optional: true
    openAiApi:
      enabled: false
      openAiApiKey: ""
    replicaCount: 1
    image:
      repository: us-central1-docker.pkg.dev/keephq/keep/keep-api
      pullPolicy: Always
    extraInitContainers: []
    imagePullSecrets: []
    podAnnotations:
      "prometheus.io/scrape": "true"
      "prometheus.io/path": "/metrics/processing"
      "prometheus.io/port": "8080"
    podSecurityContext: {}
    securityContext: {}
    service:
      type: ClusterIP
      port: 8080
    # GKE healthcheck config
    backendConfig:
      healthCheck:
        checkIntervalSec: 30
        timeoutSec: 10
        healthyThreshold: 1
        unhealthyThreshold: 3
        path: "/docs"
        port: 8080
        type: HTTP
    resources:
      # limits:
      #   cpu: 2000m
      #   memory: 4Gi
      requests:
        cpu: 500m
        memory: 512Mi
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    topologySpreadConstraints: []
    tolerations:
      - key: "datumhq.com/karpenter-taint"
        operator: "Equal"
        value: "karpenter-bdo-sandbox"
        effect: "NoExecute"
    affinity: {}
    healthCheck:
      enabled: true
      probes:
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8080
    extraVolumeMounts: []
    extraVolumes: []
    # override the default command
    # command:
    #   - "gunicorn"
    # override the default args
    # args:
    #   - "keep.api.api:get_app"
    #   - "--bind"
    #   - "0.0.0.0:8080"
    #   - "--workers"
    #   - "4"
    #   - "-k"
    #   - "uvicorn.workers.UvicornWorker"
    #   - "-c"
    #   - "/venv/lib/python3.11/site-packages/keep/api/config.py"
    #   - "--preload"
    #   - "--access-logfile"
    #   - "/tmp/accesslog"
    #   - "--error-logfile"
    #   - "/tmp/errorlog"
    #   - "--log-level"
    #   - "debug"
    #   - "--access-logformat"
    #   - "%(t)s %(h)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\" %(L)s"

  frontend:
    enabled: true
    env:
      # - name: NEXTAUTH_SECRET
      #   value: secret
      # Shahar: took me whole day to figure out that I need to set this to 1
      # https://github.com/nextauthjs/next-auth/issues/600
      - name: VERCEL
        value: 1
      - name: ENV
        value: development
      - name: NODE_ENV
        value: development
      - name: HOSTNAME
        value: 0.0.0.0
      - name: PUSHER_APP_KEY
        value: "keepappkey"
    # -- Name of the secret to include
    envFromSecret: "keephq-secret"

    # -- Sensible environment variables will be rendered as a new secret object; escape {{ in secret values to avoid Helm interpretation.
    envRenderSecret: {}

    # -- List of secrets to include. Must include name and can be marked as optional.
    envFromSecrets: []
    # - name: keep-secret-name
    #   prefix: prefix
    #   optional: true

    # -- Configmaps to include. Must include name and can be marked as optional.
    # each entry should contain a name key, and can optionally specify whether the configmap must be defined with an optional key.
    envFromConfigMaps: []
    # - name: keep-env-configmap-name
    #   prefix: prefix
    #   optional: true
    replicaCount: 1
    image:
      repository: us-central1-docker.pkg.dev/keephq/keep/keep-ui
      pullPolicy: Always
    imagePullSecrets: []
    serviceAccount:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::603603647605:role/keephq
      name: ""
    podAnnotations: {}
    podSecurityContext: {}
    securityContext: {}
    service:
      type: ClusterIP
      port: 3000
    # GKE healthcheck config
    backendConfig:
      healthCheck:
        checkIntervalSec: 30
        timeoutSec: 10
        healthyThreshold: 1
        unhealthyThreshold: 3
        path: "/signin"
        port: 3000
        type: HTTP
    resources:
      # limits:
      #   cpu: 1000m
      #   memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    topologySpreadConstraints: []
    tolerations:
      - key: "datumhq.com/karpenter-taint"
        operator: "Equal"
        value: "karpenter-bdo-sandbox"
        effect: "NoExecute"
    affinity: {}
    healthCheck:
      enabled: true
      probes:
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http

  websocket:
    enabled: true
    env:
      - name: SOKETI_HOST
        value: "0.0.0.0"
      - name: SOKETI_DEBUG
        value: "1"
      - name: SOKETI_USER_AUTHENTICATION_TIMEOUT
        value: 3000
      - name: SOKETI_DEFAULT_APP_ID
        value: 1
      - name: SOKETI_DEFAULT_APP_KEY
        value: keepappkey
      - name: SOKETI_DEFAULT_APP_SECRET
        value: keepappsecret
    replicaCount: 1
    image:
      repository: quay.io/soketi/soketi
      pullPolicy: Always
      tag: "1.4-16-debian"
    imagePullSecrets: []
    serviceAccount:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::603603647605:role/keephq
      name: ""
    podAnnotations: {}
    podSecurityContext: {}
    securityContext: {}
    service:
      type: ClusterIP
      port: 6001
    resources: {}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    topologySpreadConstraints: []
    tolerations:
      - key: "datumhq.com/karpenter-taint"
        operator: "Equal"
        value: "karpenter-bdo-sandbox"
        effect: "NoExecute"
    affinity: {}
    healthCheck:
      enabled: true
      probes:
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http

  database:
    enabled: false

  # Add this new section before or after database section
  deleteSecretJob:
    image:
      repository: bitnami/kubectl
      tag: latest
      pullPolicy: Always

utilization:
  enabled: false
  secretstore:
    secretsmanager_enabled: false
    parameterstore_enabled: true

  parameterstore:
    name: "external-secret-parameterstore-ss"
    region: "ap-southeast-1"

  externalsecrets:
    - name: keephq-secret
      spec:
        refreshInterval: 5m
        secretStoreRef:
          name: external-secret-parameterstore-ss
          kind: SecretStore
        target:
          name: keephq-secret
          creationPolicy: Owner
        dataFrom:
          - extract:
              key: /bdo/keephq/configuration
istio-expose:
  enabled: false
  gateway:
    enabled: false

  virtualservice:
    enabled: false

  virtualservices:
    - name: keephq-virtualservice
      gateways:
        - istio-system/default-wildcard-gateway
      hosts:
        - keephq.common.datumhq.com
      http:
        - match:
            - uri:
                prefix: /
          route:
            - destination:
                host: keephq-frontend
                port:
                  number: 3000
        - match:
            - uri:
                prefix: /websocket
          route:
            - destination:
                host: keephq-websocket
                port:
                  number: 6001
        - match:
            - uri:
                prefix: /v2
          route:
            - destination:
                host: keephq-backend
                port:
                  number: 8080
